cat > phase5_bootstrap.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail
FIX="${FIX:-./Fixes}"
mkdir -p "$FIX/api" "$FIX/contracts" "$FIX/migrations" "$FIX/qa"

# OpenAPI
cat > "$FIX/api/openapi_credits.yaml" <<'YAML'
openapi: 3.0.3
info: {title: RUR2 Credits API, version: "0.1.0"}
paths:
  /credits:
    get:
      summary: Get current credit balance and history
      responses:
        "200": {description: OK}
  /admin/credits/adjust:
    post:
      summary: Admin adjust credits (Â±)
      responses:
        "200": {description: OK}
  /stripe/webhook:
    post:
      summary: Stripe webhook (checkout/session + invoice events)
      responses:
        "200": {description: OK}
YAML

# Contracts (Zod)
cat > "$FIX/contracts/stripe_credits.ts" <<'TS'
import { z } from "zod";
export const CreditBalance = z.object({
  total: z.number().int(),
  available: z.number().int(),
  pending: z.number().int(),
  currency: z.string().default("usd"),
});
export const LedgerEntry = z.object({
  id: z.string(),
  ts: z.string(),
  delta: z.number().int(), // +issue / -consume / +admin / -admin
  reason: z.string(),
  ref: z.object({ kind: z.string(), id: z.string() }).optional(),
});
export const BalanceResponse = z.object({
  balance: CreditBalance, ledger: z.array(LedgerEntry)
});
export const AdjustRequest = z.object({
  delta: z.number().int(), reason: z.string().min(1)
});
export type TBalanceResponse = z.infer<typeof BalanceResponse>;
export type TAdjustRequest   = z.infer<typeof AdjustRequest>;
TS

# Migration
cat > "$FIX/migrations/002_credits.sql" <<'SQL'
-- credits ledger (idempotent-ish)
CREATE TABLE IF NOT EXISTS credits_ledger (
  id TEXT PRIMARY KEY,
  ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  user_id TEXT NOT NULL,
  delta INTEGER NOT NULL,
  reason TEXT NOT NULL,
  ref_kind TEXT,
  ref_id TEXT
);
CREATE INDEX IF NOT EXISTS ix_credits_user_ts ON credits_ledger(user_id, ts DESC);
-- view: balances
CREATE VIEW IF NOT EXISTS v_credit_balances AS
SELECT user_id, COALESCE(SUM(delta),0) AS balance
FROM credits_ledger GROUP BY user_id;
SQL

# QA smoke
cat > "$FIX/qa/phase5_smoke.sh" <<'SH2'
#!/usr/bin/env bash
set -euo pipefail
REQ=(api/openapi_credits.yaml contracts/stripe_credits.ts migrations/002_credits.sql)
for r in "${REQ[@]}"; do
  test -s "Fixes/$r" && echo "OK Fixes/$r" || { echo "MISS Fixes/$r"; exit 1; }
done
echo "Phase 5 scaffold ready."
SH2
chmod +x "$FIX/qa/phase5_smoke.sh"

echo "Phase 5 scaffold written (OpenAPI, Zod, SQL, QA)."
SH
chmod +x phase5_bootstrap.sh
./phase5_bootstrap.sh
Fixes/qa/phase5_smoke.sh
