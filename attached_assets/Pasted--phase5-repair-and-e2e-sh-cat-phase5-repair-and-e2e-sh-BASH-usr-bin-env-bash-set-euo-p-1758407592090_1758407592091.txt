# phase5_repair_and_e2e.sh
cat > phase5_repair_and_e2e.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail

LEDGER=${LEDGER:-Fixes/reports/credits_ledger.json}
mkdir -p "$(dirname "$LEDGER")"
chmod -f u+rw "$(dirname "$LEDGER")" 2>/dev/null || true

python - <<'PY'
import json, shutil, time
from pathlib import Path
L = Path("Fixes/reports/credits_ledger.json")
L.parent.mkdir(parents=True, exist_ok=True)

def seed():
    return [
      {"type":"purchase","amount":1000,"ref":"seed_purchase","ts":"2025-01-01T00:00:00Z"},
      {"type":"consume","amount":-100,"ref":"seed_consume","ts":"2025-01-01T00:05:00Z"}
    ]

def backup():
    b=L.with_suffix(".bak"); shutil.copyfile(L,b)

def normalize(lst):
    out=[]
    for it in lst:
        if not isinstance(it, dict): continue
        t = it.get("type") or it.get("kind") or it.get("action") or it.get("event") or it.get("op") or "adjust"
        amt = it.get("amount"); 
        if not isinstance(amt,(int,float)): amt = 0
        ref = str(it.get("ref","seed_autofix"))
        ts  = str(it.get("ts","2025-01-01T00:00:00Z"))
        out.append({"type":t,"amount":amt,"ref":ref,"ts":ts})
    return out

if not L.exists():
    L.write_text(json.dumps(seed(), indent=2))
else:
    try:
        data=json.loads(L.read_text())
    except Exception:
        backup(); L.write_text(json.dumps(seed(), indent=2))
    else:
        if not isinstance(data,list):
            backup(); L.write_text(json.dumps(seed(), indent=2))
        else:
            fixed=normalize(data)
            if not fixed: fixed=seed()
            if fixed!=data:
                backup(); L.write_text(json.dumps(fixed, indent=2))
print("LEDGER_OK", len(json.loads(L.read_text())))
PY

chmod -f u+rw "$LEDGER" 2>/dev/null || true

set +e
echo "==> Phase 5 e2e (verbose)"
bash -x Fixes/qa/phase5_e2e.sh
code=$?
set -e
echo "E2E_EXIT:$code"
exit $code
BASH
chmod +x phase5_repair_and_e2e.sh
./phase5_repair_and_e2e.sh
