Diagnose (copy-paste, no changes)
# DIAGNOSE DISPLAY/ROUTING STATE
set -euo pipefail
PORT="${PORT:-5000}"

echo "== PORT = $PORT =="
echo "== ROOT RESPONSE HEADERS =="
curl -sI "http://localhost:$PORT/" | head -n 10 || true
echo

echo "== ROOT FIRST LINE (HTML vs JSON) =="
curl -s "http://localhost:$PORT/" | head -n 1 || true
echo

echo "== API HEALTH =="
curl -s "http://localhost:$PORT/api/health" || true
echo; echo

echo "== server/index.ts: app.listen + static mounts =="
grep -nE "app.listen|express\.static|sendFile|vite" ~/workspace/server/index.ts || true
echo

echo "== server/routes.ts: vite or catch-all =="
grep -nE "vite|catch-?all|sendFile|express\.static" ~/workspace/server/routes.ts || true
echo

echo "== vite middleware file present? =="
[ -f ~/workspace/server/vite.ts ] && echo "server/vite.ts EXISTS" || echo "server/vite.ts not present"
echo

echo "== client build present? =="
[ -f ~/workspace/client/dist/index.html ] && echo "client/dist/index.html EXISTS" || echo "client/dist MISSING"
echo

echo "== .replit run command =="
sed -n '1,120p' ~/workspace/.replit 2>/dev/null | sed -n '1,40p' || echo ".replit not found"

2) Fix exactly what the diagnosis shows

A) If output mentions vite in server files OR errors reference server/vite.ts:
Remove middleware; keep API only.

# routes.ts: remove vite/catch-all and add simple root
applypatch() { ed -s "$1" <<'ED'
g/vite/d
wq
ED
}
applypatch ~/workspace/server/index.ts || true
applypatch ~/workspace/server/routes.ts || true

cat > ~/workspace/server/routes.ts <<'TS'
import { Router } from "express";
import assessments from "./routes/assessments";
import answers from "./routes/answers";
import adminImport from "./routes/adminImport";
import exportsRouter from "./routes/exports";

const router = Router();
router.get("/", (_req, res) => res.type("html").send("<h1>RUR2 API</h1><p><a href='/api/health'>/api/health</a></p>"));
router.use("/api/assessments", assessments as any);
router.use("/api/answers", answers as any);
router.use("/api/admin", adminImport as any);
router.use("/api/exports", exportsRouter as any);
export default router;
TS


B) If client/dist MISSING and no static serving in index.ts:
Build SPA, then mount it.

# build client
npm --prefix ~/workspace/client i
npm --prefix ~/workspace/client run build

# mount static SPA in server/index.ts (idempotent)
grep -q "client/dist" ~/workspace/server/index.ts || cat >> ~/workspace/server/index.ts <<'TS'

// --- SPA static serve (keep after API mounts) ---
import path from "path";
import express from "express";
const distDir = path.resolve(__dirname, "../client/dist");
app.use(express.static(distDir));
app.get("*", (req, res, next) => {
  if (req.path.startsWith("/api")) return next();
  res.sendFile(path.join(distDir, "index.html"));
});
// --- end SPA static ---
TS


C) If client/dist/index.html EXISTS but root isn’t HTML:
Static is not mounted—apply the same “mount static SPA” block from B (no rebuild needed).

3) Verify (single block)
PORT="${PORT:-5000}"
echo "ROOT should be HTML:"
curl -s "http://localhost:$PORT/" | head -n 1
echo "API health should be ok:"
curl -s "http://localhost:$PORT/api/health"
AID=$(curl -sS -X POST "http://localhost:$PORT/api/assessments" -H 'Content-Type: application/json' -d '{"stdCode":"R2V3_1"}' | node -e 'let s="";process.stdin.on("data",d=>s+=d).on("end",()=>{try{console.log(JSON.parse(s).id)}catch{}})')
echo "Open (single origin now): http://localhost:$PORT/assessments/$AID?tab=questions"


Reply with the diagnosis output (step 1). I’ll give a one-liner if anything still blocks.