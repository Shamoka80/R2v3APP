Part 1 — Bootstrap (scaffold RBAC + tokens + audit)
# phase6_bootstrap.sh
cat > phase6_bootstrap.sh <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
FIX=${FIX:-./Fixes}
mkdir -p "$FIX/api" "$FIX/contracts" "$FIX/migrations" "$FIX/qa" "$FIX/reports"

# OpenAPI (RBAC + tokens + audit) — create if absent
api="$FIX/api/openapi_security.yaml"
if [ ! -s "$api" ]; then
cat > "$api" <<'YAML'
openapi: 3.0.3
info: {title: RUR2 Security API, version: 0.1.0}
paths:
  /auth/rbac/roles:
    get: {summary: List roles, responses: {200:{description: ok}}}
    post: {summary: Create role, responses: {201:{description: created}}}
  /auth/rbac/assign:
    post: {summary: Assign role to user, responses: {204:{description: ok}}}
  /auth/tokens/rotate:
    post: {summary: Rotate provider token, responses: {200:{description: ok}}}
  /auth/tokens/revoke:
    post: {summary: Revoke provider token, responses: {204:{description: ok}}}
  /audit/logs:
    get: {summary: List audit logs, responses: {200:{description: ok}}}
YAML
fi

# Contracts (Zod) — create if absent
ts="$FIX/contracts/rbac_contracts.ts"
if [ ! -s "$ts" ]; then
cat > "$ts" <<'TS'
import { z } from "zod";

export const Role = z.object({ id: z.string(), name: z.string() });
export const Permission = z.object({ id: z.string(), action: z.string(), resource: z.string() });

export const AssignRoleReq = z.object({ userId: z.string(), roleId: z.string() });

export const RotateReq = z.object({
  providerId: z.string(),
  reason: z.enum(["routine","compromise","manual"]),
});
export const RotateRes = z.object({
  tokenId: z.string(), rotatedFrom: z.string().nullable(), createdAt: z.string(),
});

export const RevokeReq = z.object({
  tokenId: z.string(), reason: z.string().min(1),
});

export const AuditLog = z.object({
  id: z.string(),
  ts: z.string(),
  who: z.string().nullable(),
  action: z.string(),
  target: z.string().nullable(),
  meta: z.record(z.any()).optional(),
});
TS
fi

# Migration — create if absent
sql="$FIX/migrations/003_security.sql"
if [ ! -s "$sql" ]; then
cat > "$sql" <<'SQL'
-- RBAC
CREATE TABLE IF NOT EXISTS roles (
  id TEXT PRIMARY KEY, name TEXT NOT NULL UNIQUE
);
CREATE TABLE IF NOT EXISTS permissions (
  id TEXT PRIMARY KEY, action TEXT NOT NULL, resource TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS role_permissions (
  role_id TEXT NOT NULL, perm_id TEXT NOT NULL,
  PRIMARY KEY (role_id, perm_id)
);
CREATE TABLE IF NOT EXISTS user_roles (
  user_id TEXT NOT NULL, role_id TEXT NOT NULL,
  PRIMARY KEY (user_id, role_id)
);

-- Provider tokens (rotation/revocation)
CREATE TABLE IF NOT EXISTS provider_tokens (
  id TEXT PRIMARY KEY,
  provider_id TEXT NOT NULL,
  key_hash TEXT NOT NULL,
  created_at TEXT NOT NULL,
  expires_at TEXT,
  revoked_at TEXT,
  rotated_from TEXT
);

-- Audit log
CREATE TABLE IF NOT EXISTS audit_log (
  id TEXT PRIMARY KEY,
  ts TEXT NOT NULL,
  who TEXT,
  action TEXT NOT NULL,
  target TEXT,
  meta TEXT
);

CREATE INDEX IF NOT EXISTS idx_audit_ts ON audit_log(ts);
CREATE INDEX IF NOT EXISTS idx_token_provider ON provider_tokens(provider_id);
SQL
fi

# QA scripts
smoke="$FIX/qa/phase6_smoke.sh"
if [ ! -s "$smoke" ]; then
cat > "$smoke" <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
FIX=${FIX:-./Fixes}
ok=1
for f in "$FIX/api/openapi_security.yaml" "$FIX/contracts/rbac_contracts.ts" "$FIX/migrations/003_security.sql"; do
  if [ ! -s "$f" ]; then echo "MISS $f"; ok=0; else echo "OK $f"; fi
done
grep -q "CREATE TABLE IF NOT EXISTS roles" "$FIX/migrations/003_security.sql" || { echo "MISS roles table"; ok=0; }
grep -q "provider_tokens" "$FIX/migrations/003_security.sql" || { echo "MISS provider_tokens"; ok=0; }
grep -q "audit_log" "$FIX/migrations/003_security.sql" || { echo "MISS audit_log"; ok=0; }
[ $ok -eq 1 ] && echo "Phase6_SMOKE: PASS" || { echo "Phase6_SMOKE: FAIL"; exit 1; }
BASH
chmod +x "$smoke"
fi

e2e="$FIX/qa/phase6_e2e.sh"
if [ ! -s "$e2e" ]; then
cat > "$e2e" <<'BASH'
#!/usr/bin/env bash
set -euo pipefail
OUTD=${OUTD:-./Fixes/reports}
LED="$OUTD/security_e2e.json"
mkdir -p "$OUTD"

python - <<'PY'
import json, os, sys, hashlib, time
from pathlib import Path
out = Path(os.environ.get("LED","Fixes/reports/security_e2e.json"))

def now(): return time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
def hid(s): return hashlib.sha256(s.encode()).hexdigest()[:12]

data = {"roles":[{"id":"r_admin","name":"Admin"}],
        "permissions":[{"id":"p_tokens_rotate","action":"rotate","resource":"provider_token"}],
        "role_permissions":[{"role_id":"r_admin","perm_id":"p_tokens_rotate"}],
        "user_roles":[{"user_id":"u1","role_id":"r_admin"}],
        "provider_tokens":[{"id":"t1","provider_id":"p1","key_hash":hid("k1"),"created_at":now(),"expires_at":None,"revoked_at":None,"rotated_from":None}],
        "audit_log":[]}

# simulate rotation
old = data["provider_tokens"][0]
new = {"id":"t2","provider_id":old["provider_id"],"key_hash":hid("k2"),"created_at":now(),"expires_at":None,"revoked_at":None,"rotated_from":old["id"]}
old["revoked_at"] = now()
data["provider_tokens"].append(new)

data["audit_log"].append({"id":hid("e1"),"ts":now(),"who":"u1","action":"token.rotate","target":new["id"],"meta":{"from":old["id"],"provider":old["provider_id"]}})
data["audit_log"].append({"id":hid("e2"),"ts":now(),"who":"u1","action":"token.revoke","target":old["id"],"meta":{"reason":"rotation"}})

ok = (len(data["provider_tokens"])==2 and any(a["action"]=="token.rotate" for a in data["audit_log"]))
out.write_text(json.dumps({"ok":ok, **data}, indent=2))
print(json.dumps({"ok":ok,"path":str(out),"tokens":len(data["provider_tokens"]),"audit":len(data["audit_log"])}, indent=2))
sys.exit(0 if ok else 1)
PY

BASH
chmod +x "$e2e"
fi

echo "Phase 6 scaffold ready."
BASH
chmod +x phase6_bootstrap.sh
./phase6_bootstrap.sh

Part 2 — Verify (smoke + e2e)
bash Fixes/qa/phase6_smoke.sh && bash Fixes/qa/phase6_e2e.sh